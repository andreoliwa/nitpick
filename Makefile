# You can set these variables from the command line.
SPHINXOPTS    =
SPHINXBUILD   = sphinx-build
SOURCEDIR     = docs
BUILDDIR      = docs/_build
LONG_RERUN    = 12h
SHORT_RERUN   = 30m

.PHONY: help Makefile always-run pre-commit poetry doc nitpick flake8 test ci

dev: always-run .cache/make/long-pre-commit .cache/make/long-poetry .cache/make/doc .cache/make/run .cache/make/test

always-run:
	@mkdir -p .cache/make

# Remove cache files if they are older than the configured time, so the targets will be rebuilt
# "fd" is a faster alternative to "find": https://github.com/sharkdp/fd
	@fd --changed-before $(LONG_RERUN) long .cache/make --exec-batch rm '{}' ;
		@fd --changed-before $(SHORT_RERUN) short .cache/make --exec-batch rm '{}' ;

help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
	@echo 'Extra commands:'
	@echo '  pre-commit  update and install pre-commit hooks'
	@echo '  poetry      update dependencies'
	@echo '  doc         build documentation only (use force=1 to force a rebuild)'
	@echo '  nitpick     run the nitpick pre-commit hook to check local style changes'
	@echo '  flake8      run flake8 to check local style changes'
	@echo '  test        run tests (use failed=1 to run only failed tests)'
	@echo '  ci          simulate CI run (force clean docs and tests, but do not update pre-commit nor Poetry)'
	@echo
	@echo 'Run 'make -B' or 'make --always-make' to force a rebuild of all targets'

pre-commit:
	-rm .cache/make/long-pre-commit
	$(MAKE)

.cache/make/long-pre-commit: .pre-commit-config.yaml .pre-commit-hooks.yaml
	pre-commit autoupdate
	pre-commit install --install-hooks
	pre-commit install --hook-type commit-msg
	pre-commit gc
	touch .cache/make/long-pre-commit
	-rm .cache/make/run

poetry:
	-rm .cache/make/long-poetry
	$(MAKE)

.cache/make/long-poetry: pyproject.toml
	poetry update
	poetry install

# Update the requirements for Read the Docs, adding Nitpick as well (autodoc needs it)
# "rg" is a faster alternative to "grep": https://github.com/BurntSushi/ripgrep
	echo "# NOTE: generated by the Makefile" > docs/requirements.txt
	echo "# This will be installed by Read the Docs, from the root folder" >> docs/requirements.txt
	pip freeze | rg -i -e sphinx -e pygments | sort -u >> docs/requirements.txt
	echo ". # Install nitpick from the current directory (root)" >> docs/requirements.txt

	touch .cache/make/long-poetry
	-rm .cache/make/run

doc: docs/*/* *.rst *.md
ifdef force
	-rm -rf .cache/make/*doc* docs/_build docs/source
endif
	$(MAKE) .cache/make/short-doc-source .cache/make/doc-defaults .cache/make/doc .cache/make/short-doc-link-check

.cache/make/short-doc-source:
	-rm -rf docs/source
	sphinx-apidoc --force --module-first --separate --implicit-namespaces --output-dir docs/source src/nitpick/
	touch .cache/make/short-doc-source

.cache/make/doc-defaults: docs/generate_rst.py styles/*/*
	python3 docs/generate_rst.py
	touch .cache/make/doc-defaults

# $(O) is meant as a shortcut for $(SPHINXOPTS).
.cache/make/doc: docs/*/* *.rst *.md .cache/make/short-doc-source .cache/make/doc-defaults
	@$(SPHINXBUILD) "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
	$(MAKE) .cache/make/short-doc-link-check
	touch .cache/make/doc

# Detect broken links on the documentation
.cache/make/short-doc-link-check:
	$(SPHINXBUILD) "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O) -blinkcheck
	touch .cache/make/short-doc-link-check

.cache/make/run: .github/*/* .travis/*/* docs/*.py src/*/* styles/*/* tests/*/* nitpick-style.toml
	pre-commit run --all-files
	flake8
	touch .cache/make/run

nitpick:
	pre-commit run --all-files nitpick-local

flake8:
	flake8 --select=NIP

test:
	-rm .cache/make/test
	$(MAKE) .cache/make/test

.cache/make/test: .cache/make/long-poetry src/*/* styles/*/* tests/*/*
ifdef failed
	pytest --failed
else
	-rm .pytest/failed
	# Run doctests in a separate command.
	# It was breaking a test because the Nitpick Flake8 plugin was being initialized twice, raising the error:
	# optparse.OptionConflictError: option --nitpick-offline: conflicting option string(s): --nitpick-offline
	pytest --doctest-modules src/
	pytest
endif
	touch .cache/make/test

ci:
	-rm -rf .cache/make/*doc* .cache/make/run .cache/make/test docs/_build docs/source
	$(MAKE) force=1
