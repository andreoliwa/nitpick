# You can set these variables from the command line.
SPHINXOPTS    =
SPHINXBUILD   = poetry run sphinx-build
SOURCEDIR     = docs
BUILDDIR      = docs/_build

# Create the cache dir if it doesn't exist
$(shell mkdir -p .cache/make)

.PHONY: Makefile

build: always-run .cache/make/long-pre-commit .cache/make/long-poetry .cache/make/doc .cache/make/lint .cache/make/test  # Build the project (default target if you simply run `make` without targets)
.PHONY: build

help:
	@echo 'Choose one of the following targets:'
	@cat Makefile | egrep '^[a-z0-9-]+: *.*#' | sed -E -e 's/:.+# */@ /g' | sort | awk -F@ '{printf "  \033[1;34m%-10s\033[0m %s\n", $$1, $$2}'
	@echo
	@echo 'Run 'make -B' or 'make --always-make' to force a rebuild of all targets'
.PHONY: help

clean: # Clean all build output (cache, tox, coverage)
	rm -rf .python-version .cache .mypy_cache .pytest_cache .tox docs/_build src/*.egg-info .coverage htmlcov/
.PHONY: clean

always-run:

# Remove cache files if they are older than the configured time, so the targets will be rebuilt
# "fd" is a faster alternative to "find": https://github.com/sharkdp/fd
	@fd --changed-before 12h long .cache/make --exec-batch rm '{}' ;
	@fd --changed-before 30m short .cache/make --exec-batch rm '{}' ;

# Always remove this pyenv file before starting.
# Since I'm using poetry locally, there is no pyenv environment for nitpick, and this error is raised by poetry:
# ModuleNotFoundError: No module named 'cleo'
	@rm -f .python-version
.PHONY: always-run

pre-commit: .pre-commit-config.yaml .pre-commit-hooks.yaml # Update and install pre-commit hooks
	pre-commit autoupdate
	pre-commit install --install-hooks
	pre-commit install --hook-type commit-msg
	pre-commit gc
	touch .cache/make/long-pre-commit
.PHONY: pre-commit

.cache/make/long-poetry:
poetry: pyproject.toml # Update dependencies
	poetry update
	poetry install

# Update the requirements for Read the Docs, adding Nitpick as well (autodoc needs it)
# "rg" is a faster alternative to "grep": https://github.com/BurntSushi/ripgrep
	echo "# NOTE: generated by the Makefile" > docs/requirements.txt
	echo "# This will be installed by Read the Docs, from the root folder" >> docs/requirements.txt
	poetry run python3 -m pip freeze | rg -i -e sphinx -e pygments | sort -u >> docs/requirements.txt

	touch .cache/make/long-poetry
.PHONY: poetry

doc: docs/*/* *.rst *.md # Build documentation only (use force=1 to force a rebuild)
ifdef force
	@rm -rf .cache/make/*doc* docs/_build docs/source
endif
	$(MAKE) .cache/make/short-doc-source .cache/make/doc-defaults .cache/make/doc .cache/make/short-doc-link-check
.PHONY: doc

.cache/make/short-doc-source:
	@rm -rf docs/source
	poetry run sphinx-apidoc --force --module-first --separate --implicit-namespaces --output-dir docs/source src/nitpick/
	touch .cache/make/short-doc-source

.cache/make/doc-defaults: docs/generate_rst.py styles/*/*
	poetry run python3 docs/generate_rst.py
	touch .cache/make/doc-defaults

# $(O) is meant as a shortcut for $(SPHINXOPTS).
.cache/make/doc: docs/*/* *.rst *.md .cache/make/short-doc-source .cache/make/doc-defaults
	@$(SPHINXBUILD) "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
	$(MAKE) .cache/make/short-doc-link-check
	touch .cache/make/doc

# Detect broken links on the documentation
.cache/make/short-doc-link-check:
	$(SPHINXBUILD) "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O) -blinkcheck
	touch .cache/make/short-doc-link-check

lint: .github/*/* .travis/*/* docs/*.py src/*/* styles/*/* tests/*/* nitpick-style.toml .cache/make/long-poetry .cache/make/long-pre-commit # Lint the project (tox running pre-commit, flake8)
	tox -e lint
	touch .cache/make/lint

nitpick: # Run the nitpick pre-commit hook to check local style changes
	pre-commit run --all-files nitpick-local
.PHONY: nitpick

flake8: # Run flake8 to check local style changes
	poetry run flake8 --select=NIP
.PHONY: flake8

.cache/make/long-pyenv-local: setup.cfg .cache/make/long-poetry
	# Before running tox, setup pyenv with Python version between 5 and 9
	pyenv local $(shell pyenv versions --bare | egrep -v '/' | egrep '^3.[5-9]' | sort -Vr)
	touch .cache/make/long-pyenv-local

test: export TOX_PYTHON_ENVS=$(shell tox -l | egrep '^py' | xargs echo | tr ' ' ',') # Run tests (use failed=1 to run only failed tests)
test: .cache/make/long-poetry src/*/* styles/*/* tests/*/* .cache/make/long-pyenv-local
ifdef failed
	tox -e ${TOX_PYTHON_ENVS} --failed
else
	@rm -f .pytest/failed
	tox -e "clean,${TOX_PYTHON_ENVS},report"
endif
	touch .cache/make/test
.PHONY: test

tox: .cache/make/long-pyenv-local # Run tox
	tox
	touch .cache/make/lint
	touch .cache/make/test
.PHONY: tox

ci: # Simulate CI run (force clean docs and tests, but do not update pre-commit nor Poetry)
	@rm -rf .cache/make/*doc* .cache/make/lint .cache/make/test docs/_build docs/source
	$(MAKE) force=1 build
.PHONY: ci
