"""CLI tests."""
from pathlib import Path
from typing import Generator
from unittest import mock

import pytest
import tomlkit

from nitpick import __version__
from nitpick.constants import (
    CONFIG_TOOL_NITPICK_KEY,
    DOT_NITPICK_TOML,
    PYTHON_PYPROJECT_TOML,
    READ_THE_DOCS_URL,
    EmojiEnum,
)
from nitpick.style import Scheme, StyleManager
from tests.helpers import ProjectMock


def test_simple_error(tmp_path: Path) -> None:
    """A simple error on the CLI."""
    project = (
        ProjectMock(tmp_path)
        .style(
            """
            ["pyproject.toml".tool.black]
            line-length = 100
            """
        )
        .pyproject_toml(
            """
            [tool.blabla]
            something = 22
            """
        )
    )

    project.cli_run(
        f"""
        {project.root_dir / "pyproject.toml"!s}:1: NIP318  has missing values:
        [tool.black]
        line-length = 100
        """
    )


def test_missing_style_and_suggest_option(tmp_path: Path) -> None:
    """Print error if both style and --suggest options are missing."""
    ProjectMock(tmp_path).cli_init(
        f"Nothing to do. {EmojiEnum.SLEEPY_FACE.value} Either pass at least one style URL"
        " or use --suggest to add styles based on the files in the project root"
        " (you can do both at the same time)."
    )


@pytest.mark.parametrize("config_file", [DOT_NITPICK_TOML, PYTHON_PYPROJECT_TOML])
@pytest.mark.skip(reason="WIP")  # TODO(AA): fix the test
def test_config_file_already_has_tool_nitpick_section(tmp_path: Path, config_file: str) -> None:
    """Test if both config files already exist."""
    project = ProjectMock(tmp_path, pyproject_toml=False, setup_py=True).save_file(
        config_file,
        f"""
        [{CONFIG_TOOL_NITPICK_KEY}]
        style = ['/this/should/not/be/validated-yet.toml']
        """,
    )
    project.cli_init(
        [
            f"The config file {config_file!r} already has a [{CONFIG_TOOL_NITPICK_KEY}] section.",
            "style = ['/this/should/not/be/validated-yet.toml']",
        ],
        exit_code=1,
    )


@pytest.fixture()
def style_dir_with_types(shared_datadir: Path) -> Generator[Path, None, None]:
    """A mocked directory with style files organised into "identify" subdirs."""
    with mock.patch("nitpick.style.builtin_resources_root") as mock_builtin_resources_root:
        mock_builtin_resources_root.return_value = Path(shared_datadir / "typed-style-dir")
        yield mock_builtin_resources_root


def test_create_basic_dot_nitpick_toml(style_dir_with_types: Path, tmp_path: Path) -> None:
    """If no config file is found, create a basic .nitpick.toml."""
    assert style_dir_with_types
    project = ProjectMock(tmp_path, pyproject_toml=False, setup_py=True)
    project.cli_init(
        f"""
        New styles:
        - py://data/typed-style-dir/any/editorconfig
        - py://data/typed-style-dir/python/black
        The [{CONFIG_TOOL_NITPICK_KEY}] table was updated in {DOT_NITPICK_TOML!r}: 2 styles appended. {EmojiEnum.STAR_CAKE.value}
        """,
        fix=True,
        suggest=True,
        exit_code=1,
    ).assert_file_contents(
        DOT_NITPICK_TOML,
        f"""
        [{CONFIG_TOOL_NITPICK_KEY}]
        # nitpick-start (auto-generated by "nitpick init --suggest" {__version__})
        # Styles added to the Nitpick Style Library will be appended at the end of the 'style' key.
        # If you don't want a style, move it to the 'dont_suggest' key.
        # nitpick-end
        style = [
          "py://data/typed-style-dir/any/editorconfig",
          "py://data/typed-style-dir/python/black",]
        dont_suggest = []
        """,
    )


@pytest.mark.skip(reason="WIP")  # TODO(AA): fix the test
def test_init_empty_pyproject_toml(tmp_path: Path) -> None:
    """If pyproject.toml exists, but it's empty, add the [tool.nitpick] table."""
    project = ProjectMock(tmp_path, pyproject_toml=False, setup_py=True)
    url = StyleManager.get_default_style_url()
    project.pyproject_toml("").cli_init(
        [
            f"The [{CONFIG_TOOL_NITPICK_KEY}] section was created in the config file {PYTHON_PYPROJECT_TOML!r}",
            "style = ['py://nitpick/resources/presets/nitpick']",
        ]
    ).assert_file_contents(
        PYTHON_PYPROJECT_TOML,
        f"""
        [{CONFIG_TOOL_NITPICK_KEY}]
        # Generated by the 'nitpick init' command
        # More info at {READ_THE_DOCS_URL}configuration.html
        style = ['{url}']
        """,
        lstrip=False,
    )
    assert url.scheme == Scheme.PY


@pytest.mark.parametrize(
    ("styles", "expected_styles"),
    [
        ((), "style = ['py://nitpick/resources/presets/nitpick']"),  # no arguments, default style
        (
            ("https://github.com/andreoliwa/nitpick/blob/develop/initial.toml", "./local.toml"),
            "style = ['https://github.com/andreoliwa/nitpick/blob/develop/initial.toml', './local.toml']",
        ),
    ],
)
@pytest.mark.skip(reason="WIP")  # TODO(AA): fix the test
def test_add_tool_nitpick_section_to_pyproject_toml(tmp_path, styles, expected_styles) -> None:
    """Add a [tool.nitpick] section to pyproject.toml."""
    project = ProjectMock(tmp_path).pyproject_toml(
        """
        [tool.black]
        line-length = 120
        """
    )
    expected = styles or [StyleManager.get_default_style_url()]

    project.cli_init(
        f"The [{CONFIG_TOOL_NITPICK_KEY}] section was created in the config file {PYTHON_PYPROJECT_TOML!r}\n{expected_styles}",
        *styles,
    ).assert_file_contents(
        PYTHON_PYPROJECT_TOML,
        f"""
        [tool.black]
        line-length = 120

        [{CONFIG_TOOL_NITPICK_KEY}]
        # Generated by the 'nitpick init' command
        # More info at {READ_THE_DOCS_URL}configuration.html
        style = {tomlkit.array([tomlkit.string(str(url)) for url in expected]).as_string()}
        """,
    )


# TODO(AA): check branch coverage and add tests for all cases
# TODO(AA): test init --force flag
# TODO(AA): test init when there is a [tool.nitpick] section but no [tool.nitpick.style] key
# TODO(AA): test init with no existing table
# TODO(AA): test missing ignored styles array is created
# TODO(AA): test create the ignored styles array only when suggesting styles
